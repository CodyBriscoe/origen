module Origen
  module Model
    module Exporter
      def export(name, options = {})
        path = export_path(name)
        FileUtils.rm_rf(path) if File.exist?(path)
        FileUtils.mkdir_p(path)
        File.open(File.join(path, 'top.rb'), 'w') do |f|
          f.puts '# This file was automatically generated by Origen, any hand edits will likely get overwritten'
          f.puts "# Created at #{Time.now.strftime('%e %b %Y %H:%M%p')} by #{User.current.name}"
          f.puts '# rubocop:disable all'
          f.puts "module #{Origen.app.namespace}"
          f.puts "  module #{name.to_s.camelcase}"
          f.puts '    module Top'
          f.puts '      def self.extended(model)'
          if top_level?
            pins.each do |id, pin|
              f.puts export_pin(id, pin, indent: 8)
            end
            pin_groups.each do |id, pins|
              f.puts export_pin_group(id, pins, indent: 8)
            end
            power_pins.each do |id, pin|
              f.puts export_pin(id, pin, indent: 8, method: :add_power_pin, attributes: [:voltage, :current_limit])
            end
            power_pin_groups.each do |id, pins|
              f.puts export_pin_group(id, pins, indent: 8, method: :add_power_pin_group)
            end
            ground_pins.each do |id, pin|
              f.puts export_pin(id, pin, indent: 8, method: :add_ground_pin)
            end
            ground_pin_groups.each do |id, pins|
              f.puts export_pin_group(id, pins, indent: 8, method: :add_ground_pin_group)
            end
          end
          f.puts '      end'
          f.puts '    end'
          f.puts '  end'
          f.puts 'end'
          f.puts '# rubocop:enable all'
        end
      end

      def import(name, options = {})
        path = File.join(export_path(name), 'top')
        require path
        extend "#{Origen.app.namespace}::#{name.to_s.camelcase}::Top".constantize
      end

      private

      def export_path(name)
        File.join(Origen.root, 'vendor', 'lib', Origen.app.namespace.to_s.underscore, 'models', name.to_s.underscore)
      end

      def export_pin(id, pin, options = {})
        indent = ' ' * (options[:indent] || 0)
        line = indent + "model.#{options[:method] || 'add_pin'} :#{id}"
        if (r = pin.instance_variable_get('@reset')) != :dont_care
          line << ", reset: :#{r}"
        end
        if (d = pin.direction) != :io
          line << ", direction: :#{d}"
        end
        Array(options[:attributes]).each do |attr|
          unless (v = pin.send(attr)).nil?
            if v.is_a?(Numeric)
              line << ", #{attr}: #{v}"
            else
              line << ", #{attr}: '#{v}'"
            end
          end
        end
        unless pin.meta.empty?
          line << ', meta: { '
          line << pin.meta.map do |k, v|
            if v.is_a?(Numeric)
              "#{k}: #{v}"
            else
              "#{k}: '#{v}'"
            end
          end.join(', ')
          line << ' }'
        end
        line
      end

      def export_pin_group(id, pins, options = {})
        indent = ' ' * (options[:indent] || 0)
        line = indent + "model.#{options[:method] || 'add_pin_group'} :#{id}, "
        if pins.endian == :little
          line << pins.reverse_each.map { |p| ":#{p.id}" }.join(', ')
          line << "\n#{indent}model.pins(:#{id}).endian = :little"
        else
          line << pins.map { |p| ":#{p.id}" }.join(', ')
        end
        line
      end
    end
  end
end
