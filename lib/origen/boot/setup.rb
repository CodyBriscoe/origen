require 'fileutils'

unless defined?(ORIGEN_ROOT)
  abort 'Something has gone wrong, ORIGEN_ROOT is not defined!'
end
origen_root = ORIGEN_ROOT

ORIGEN_BINSTUB =
"#!/usr/bin/env ruby
#
# This file was generated by Origen.
#

require 'rubygems'

origen_lib = File.expand_path('../../lib/origen', Gem.bin_path('origen', 'origen'))
origen_lib = '/home/stephen/Code/github/origen/lib/origen'
boot = File.join(origen_lib, 'boot.rb')
origen_root = File.expand_path('..', __dir__)

# If the Origen version supports the new boot system then use it
if File.exist?(boot)
  ORIGEN_ROOT = origen_root
  load boot

# Otherwise fall back to an (improved) old-style invocation via Bundler
else
  require 'pathname'
  require 'fileutils'
  $_origen_invocation_pwd = Pathname.pwd
  require File.join(origen_lib, 'site_config')
" + ORIGEN_BUNDLER_SETUP + %q(
  bundle_binstub = File.expand_path('../bundle', __FILE__)

  if File.file?(bundle_binstub)
    if File.read(bundle_binstub, 300) =~ /This file was generated by Bundler/
      load(bundle_binstub)
    else
      abort("Your `bin/bundle` was not generated by Bundler, so this binstub cannot run.
  Replace `bin/bundle` by running `bundle binstubs bundler --force`, then run this command again.")
    end
  end
  require 'bundler/setup'

  load Gem.bin_path('origen', 'origen')
end
)

lbin_dir = File.join(origen_root, 'lbin')

# Create the origen binstub
FileUtils.mkdir_p(lbin_dir)
File.open(File.join(lbin_dir, 'origen'), 'w') do |f|
  f.puts ORIGEN_BINSTUB
end
FileUtils.chmod('+x', File.join(lbin_dir, 'origen'))

if Origen.os.windows?
  Dir.glob("#{origen_root}/lbin/*").each do |bin|
    unless bin =~ /.bat$/
      bat = "#{bin}.bat"
      unless File.exist?(bat)
        File.open(bat, 'w') { |f| f.write('@"ruby.exe" "%~dpn0" %*') }
      end
    end
  end
end

bundle_path = nil

eval ORIGEN_BUNDLER_SETUP  # Will update bundle_path

# Force copy system gems to local gems
if Origen.site_config.gem_use_from_system && !File.exist?(File.join(origen_root, '.origen_archive'))
  local_gem_dir = "#{bundle_path}/ruby/#{Pathname.new(Gem.dir).basename}"
  gem_dir = Pathname.new(Gem.dir)

  Origen.site_config.gem_use_from_system.each do |gem, version|
    begin
      # This will raise an error if the system doesn't have this gem installed, that
      # will be rescued below
      spec = Gem::Specification.find_by_name(gem, version)

      # If the spec has returned a handle to a system installed gem. If this script has been invoked through
      # Bundler then it could point to some other gem dir. The only time this should occur is when switching
      # from the old system to the new system, but can't work out how to fix it so just disabling in that case.
      if spec.gem_dir =~ /#{gem_dir}/

        local_dir = File.join(local_gem_dir, Pathname.new(spec.gem_dir).relative_path_from(gem_dir))
        FileUtils.mkdir_p local_dir
        FileUtils.cp_r("#{spec.gem_dir}/.", local_dir)

        local_file = Pathname.new(File.join(local_gem_dir, Pathname.new(spec.cache_file).relative_path_from(gem_dir)))
        FileUtils.mkdir_p local_file.dirname
        FileUtils.cp(spec.cache_file, local_file)

        if spec.extension_dir && File.exist?(spec.extension_dir)
          local_dir = File.join(local_gem_dir, Pathname.new(spec.extension_dir).relative_path_from(gem_dir))
          FileUtils.mkdir_p local_dir
          FileUtils.cp_r("#{spec.extension_dir}/.", local_dir)
        end

        local_file = Pathname.new(File.join(local_gem_dir, Pathname.new(spec.spec_file).relative_path_from(gem_dir)))
        FileUtils.mkdir_p local_file.dirname
        FileUtils.cp(spec.spec_file, local_file)

        puts "Copied #{gem} #{version} from the system into #{bundle_path}"

      end

    rescue Exception # Gem::LoadError  # Rescue everything here, this is a try-our-best operation, better to
      # continue and try and install the gem if this fails rather than crash
      # This just means that one of the gems that should be copied from the system
      # was not actually installed in the system, so nothing we can do about that here
    end
  end
end

puts
puts 'Your application has been setup successfully' unless ARGV.include?('--quiet')

exit 0
