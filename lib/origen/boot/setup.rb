require 'fileutils'

unless defined?(ORIGEN_APP_ROOT)
  abort "Something has gone wrong, ORIGEN_APP_ROOT is not defined!"
end
app_root = ORIGEN_APP_ROOT

ORIGEN_BINSTUB = %q(
#!/usr/bin/env ruby
#
# This file was generated by Origen.
#

require "rubygems"

origen_lib = File.expand_path('../../lib/origen', Gem.bin_path("origen", "origen"))
origen_lib = "/home/stephen/Code/github/origen/lib/origen"
boot = File.join(origen_lib, 'boot.rb')
app_root = File.expand_path('..', __dir__)

# If the system Ruby Origen gem supports the new boot system then use it
if File.exist?(boot)
  ORIGEN_APP_ROOT = app_root
  load boot

# Otherwise fall back to an (improved) old-style invocation via Bundler
else
  require 'pathname'
  require 'fileutils'
  $_origen_invocation_pwd = Pathname.pwd
  require File.join(origen_lib, 'site_config')

  if Origen.site_config.gem_manage_bundler
    FileUtils.mkdir_p(File.join(app_root, '.bundle'))
    File.open(File.join(app_root, '.bundle', 'config'), 'w') do |f|
      f.puts '# Origen is managing this file, any local edits will be overwritten'
      f.puts '# IT SHOULD NOT BE CHECKED INTO REVISION CONTROL!'
      f.puts "---" 
      #f.puts "BUNDLE_BIN: \"#{File.join(app_root, 'lbin')}\""
      # If gems have been installed to the app, always use them
      vendor_gems = File.join(app_root, 'vendor', 'gems')
      if File.exist?(vendor_gems)
        f.puts "BUNDLE_PATH: \"#{vendor_gems}\""
        f.puts "BUNDLE_CLEAN: true"
      else
        f.puts "BUNDLE_PATH: \"#{File.expand_path(Origen.site_config.gem_install_dir)}\""
      end
    end
  end

  bundle_binstub = File.expand_path("../bundle", __FILE__)

  if File.file?(bundle_binstub)
    if File.read(bundle_binstub, 300) =~ /This file was generated by Bundler/
      load(bundle_binstub)
    else
      abort("Your `bin/bundle` was not generated by Bundler, so this binstub cannot run.
  Replace `bin/bundle` by running `bundle binstubs bundler --force`, then run this command again.")
    end
  end
  require "bundler/setup"

  load Gem.bin_path("origen", "origen")
end
)

# Blow away everything
lbin_dir = File.join(ORIGEN_APP_ROOT, 'lbin')

# Create the origen binstub
FileUtils.rm_rf(lbin_dir) if File.exist?(lbin_dir)
FileUtils.mkdir(lbin_dir)
File.open(File.join(lbin_dir, 'origen'), 'w') do |f|
  f.puts ORIGEN_BINSTUB
end
FileUtils.chmod("+x", File.join(lbin_dir, 'origen'))

# Configure Bundler
FileUtils.mkdir_p(File.join(app_root, '.bundle'))
File.open(File.join(app_root, '.bundle', 'config'), 'w') do |f|
  f.puts '# Origen is managing this file, any local edits will be overwritten'
  f.puts '# IT SHOULD NOT BE CHECKED INTO REVISION CONTROL!'
  f.puts '---' 
  f.puts 'BUNDLE_BIN: false'
  # If gems have been installed to the app, always use them
  vendor_gems = File.join(app_root, 'vendor', 'gems')
  if File.exist?(vendor_gems)
    f.puts "BUNDLE_PATH: \"#{vendor_gems}\""
    f.puts "BUNDLE_CLEAN: true"
  else
    f.puts "BUNDLE_PATH: \"#{File.expand_path(Origen.site_config.gem_install_dir)}\""
  end
end

# Create binstubs for 3rd party executables that Origen uses
Dir.chdir app_root do
  system "bundle binstubs rspec-core nanoc yard --path lbin"
end
