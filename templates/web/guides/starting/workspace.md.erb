% render "layouts/guides.html", heading: "Workspace and Dependency Management" do

This guide provides advice on how to create new application workspaces and how to
safely update your application's dependencies.

This advice is particularly critical when running in a corporate Linux environment where
the Linux distribution is older and/or you don't have permission to write to the
system Ruby installation.

#### Fix My Workspace

The most important takeaway from this guide is to add the <code>origen_updater</code> plugin to your
application, this provides a command which should fix your workspace if you ever end up
in a situation where the <code>origen</code> or <code>bundle</code> commands are no longer working.

Add it to your application's Gemfile like this:

~~~ruby
# Gemfile
source 'https://rubygems.org'

gem 'origen_updater'
~~~

Note that if your application is a plugin you should always add this to your Gemfile too,
i.e. don't put it in the .gemspec.

After adding it for the first time run:

~~~text
origen -v
~~~

This will invoke the plugin and it will create a new executable in your
application - <code>bin/fix_my_workspace</code>.

**This file should be committed to your revision control system to ensure that it is
always available to you in the future**. It's contents may be changed automatically from time-to-time if you upgrade
to a new version of the origen_updater plugin, in which case the changes should be committed
to revision control too.

To fix your workspace at any time simply run:

~~~text
./bin/fix_my_workspace
~~~


#### Creating a New Workspace

Creating a new workspace means setting up an existing application within a new directory
for the first time.

The most important thing to remember in this case is to **always run <code>origen -v</code>
as the first step after importing the application files from your revision control system.**

Doing this ensures that Origen provides some basic configuration of [Bundler](<%= path "guides/starting/gems" %>)
which will ensure that it runs well within a restricted corporate environment.

After doing this for the first time, you can then safely run the <code>bundle</code> command
directly if you want to.

If you forget to do this and run <code>bundle</code> first, then you can recover by running
the <code>fix_my_workspace</code> command as described above.

#### Updating Dependencies

Updating dependencies means changing the version of a given gem/plugin within your Gemfile
or .gemspec.

In some cases (depending on what gems you already have installed locally), you can simply make
the edit and then continue running the <code>origen</code> command without any problems.

If you don't already have the gem version installed locally, you will get a [Bundler](<%= path "guides/starting/gems" %>)
error which may or may not clearly describe the problem.

The easiest way to resolve things at this point is to simply run the <code>fix_my_workspace</code>
command as described above.

Alternatively, following this sequence will create a working environment with the new dependency
in most cases:

~~~text
> bundle

// If that doesn't work try this, where gem_name is the name of the gem you just updated in
// your Gemfile/.gemspec
> bundle update <gem_name>

// If that doesn't work try this, this will completely re-build your gem bundle, which will pull in the
// latest versions of all gems which satisfy the rules defined in your Gemfile
> bundle update
~~~

#### Workspace Size Considerations

By default, all downloaded dependencies are placed in the <code>home_dir</code>, which is likely pointing to
<code>~/.origen/gems</code>. However, gems can be large,
and bigger projects (or working on several unrelated projects) means that the <code>gems</code> directory can
quickly swell in size. This can be problematic particularly on corporate Linux systems, which usually do not
have sufficient home directories to handle the size and quantity of gems we are dealing with. There are a few
ways to deal with this.

##### Bundle Clean

Bundler comes with its own clean-up command. Running <code>bundle clean</code> when inside
of an application will remove all of the 'unused' gems currently taking up space, where 'unused' gems are defined
as gems not currently being used by the application. This can be a quick solution if you know that you have
several old, outdated gems that will likely never be used again. The only down side being other applications
will require you to reinstall gems that running <code>bundle clean</code> deleted.

You can see bundler's own documentation on this feature by running <code>bundler clean -h</code> at your
console, or be visiting the [bundler docs](https://bundler.io/v1.16/man/bundle-clean.1.html).

##### Moving Your Gems Somewhere Else

<img src="<%= path "img/memes/push_it_somewhere_else_patrick_gems.png" %>" style="display: block; margin: auto; width: 250px; height: 500px;">

Individually, you can control where your gems are installed by using either the [site configs](<%= path "guides/starting/company/" %>),
or by setting an <code>environment variable</code>. This will build or rebuild all of your gems at that
location, which is generally a project drive or somewhere else where space is less of an issue.

You can set the site config variable <code>user_gem_dir</code> to point to the new location that you
wish your gems to be installed at. Alternatively, you can set the <code>environment variable</code>
<code>ORIGEN_USER_GEM_DIR</code> to accomplish the same in a more 'linux-like' way. Recall from the
[site config page](<%= path "guides/starting/company/" %>) that environment variables will overrule
site config variables.

<div class="alert alert-info">
  <strong>Info!</strong> This will only move the location of the downloaded gems. It will not change the
  full install directory, meaning that your <a href='<%= path "guides/misc/session/" %>'>Origen session</a>, 
  logs, and <a href='<%= path "guides/starting/invoking/" %>'>global Gemfile</a> will stay in your <code>home_dir</code>.
  These items are small, and should not fill up even a minimal, corporate Linux home directory. For details on
  moving this as well, please see the <a href='<%= path "guides/advanced/invocations/" %>'>advanced topic here</a>.
</div>

<div class="alert alert-warning">
  <strong>Warning!</strong> If you are doing this inside of an application, you will need to remove the
  <code>.bundle</code> and <code>lbin</code> directories to see this take effect. These store links and
  configuration settings to your original gems directory. Don't worry though, Origen will rebuid them for you,
  with the updated gem directory this time.
</div>

<div class="alert alert-warning">
  <strong>Deprecation Warning!</strong> To support older applications, the site variable <code>gem_install_dir</code>
  and its <code>environment variable</code> counterpart <code>ORIGEN_GEM_INSTALL_DIR</code> are still valid. However, these fulfill the same
  purpose as <code>user_gem_dir</code>, with <code>user_gem_dir</code> taking precedence.
</div>

<!--
I'll discuss this topic when I release some fixes for home_dir. I'll open an issue on what I want to do
after PR #181 is released and we have some stability for one of our key users.
  - Corey (coreyeng)
##### Configuring the Home Directory Location
-->

##### Tool Repo (TR) Directories

Origen supports setting up <code>Tool Repository</code> gem builds. This is considered an advance topic, and can
be difficult to implement unless you are familiar with Origen's boot process and site configs, but it mentioned
here as being an effective means for advanced users or project managers to oversee a group of user's gem
install directories. For additional details, please see the 
[advanced topic on invoking Origen](<%= path "guides/advanced/invocations/#Site_Config_For_Toolset_Installations" %>).

% end
