% render "layouts/guides.html" do

Origen plugins are essentially Origen applications themselves.
Follow the standard instructions to [Create a New Application](<%= path "guides/starting/app" %>)
and choose one of the available plugin templates rather than an application template.

#### Understanding How Plugins are Loaded

For the purposes of this guide let's say we are creating a plugin called <code>ATDTest</code>
and this would have a top-level lib file called <code>lib/atd_test.rb</code>.

When a plugin is run from its own workspace, we would call this running in standalone or development
mode, then it is loaded like any other Origen application.
The first thing Origen does in this case is to load the plugin's gem bundle, defined in its <code>Gemfile</code>,
and then boot the plugin by loading <code>config/boot.rb</code>. Normally such a file will look like this:

~~~ruby
# config/boot.rb
require 'atd_test'
~~~

So by default this simply loads the plugin's top-level file which in this example is
<code>lib/atd_test.rb</code>.

However when the plugin is loaded as part of a parent application, neither the plugin's <code>Gemfile</code> or
its <code>config/boot.rb</code> file will be loaded.
Instead the parent application's <code>Gemfile</code> will be loaded, and this will contain
a reference to our plugin. The tool that evaluates the Gemfile, called [Bundler](http://bundler.io), will
inspect our plugin's <code>gemspec</code> file (in this example <code>atd_test.gemspec</code>) and
it will ensure that any dependencies listed there are met. Once the gem bundle has been created
it will then load our plugin's top-level file, <code>lib/atd_test.rb</code>.

The take away from this is that the following rules should be observed when creating plugins:

* Load all of your plugin's code from it's top-level file (<code>lib/atd_test.rb</code>), if that requires
  all of the lib code you wish to share with your users then they will not need to do anything except
  add your plugin to their <code>Gemfile</code>.
* The plugin's <code>config/boot.rb</code> file should only be used for loading any code which is for testing
  only or for otherwise running your plugin within its own workspace environment.
* The plugin's <code>Gemfile</code> should not be used. This should contain a line that calls <code>gemspec</code>
  which tells Bundler to refer to the plugin's gemspec file instead, e.g. <code>atd_test.gemspec</code>. This
  prevents you from having to maintain the plugin's gem dependencies in two separate locations.
* The plugin's gemspec should be used to declare all of its gem dependencies as shown below. **Note that plugins
  must never specify an absolute version of gems in its runtime dependencies.**

~~~ruby
# atd_test.gemspec

# Declare any dependencies that the plugin will need when it is running within a parent application.
# Never specify an absolute version since that can easily conflict with other plugins if they did the
# same. Instead specify a range, normally just a minimum version that you need.
spec.add_runtime_dependency "origen_jtag", ">= 1.1.0"

# Declare any dependencies that the plugin need when running in standalone/development mode only, a
# very common example is the documentation helpers plugin. This is only required to build the plugins
# web pages, but it is not required at runtime.
# Note that absolute version numbers are allowed here since this does not apply outside of this plugin.
spec.add_development_dependency "origen_doc_helpers"
~~~

#### Sharing Models and Other Lib Code

The plugin's <code>lib</code> directory will be automatically added to the Ruby load path
no special consideration is required to expose lib code to the parent application.
In our example the parent application will be able to load
any of our code like this:

~~~ruby
require 'atd_test/atd_16b'
~~~

However as noted above the plugin's top-level file, <code>lib/atd_test.rb</code> will be automatically
loaded, therefore it is the usual convention to have this file require everything else so that the parent
application does not need to manually require anything.

#### Sharing Other IP

To share source files, templates and commands the plugin must define <code>config.shared</code> in
its <code>config/application.rb</code> file, here is an example that will share everything:

~~~ruby
config.shared = {
  :patterns => "pattern",
  :templates => "templates",
  :programs => "program",
  :command_launcher => "config/shared_commands.rb"
}
~~~

Access can be restricted by specifying a sub-directory, or by simply
removing the given resource:

~~~ruby
# Only share a subset of patterns (those that live within the pattern/shared directory, those
# in pattern/development for example would not be available to the host application)
config.shared = {
  :patterns => "pattern/shared",
#  :templates => "templates",
#  :programs => "program",
#  :command_launcher => "config/shared_commands.rb"
#  :global_launcher => "config/global_commands.rb"
}
~~~

#### Sharing Templates

The host application can reference a template from an added
plugin by using the plugin's name as a pointer to the
shared template directory (the directory specified in the plugin's
<code>config.shared[:templates]</code> attribute),
and then a relative path from there to the required template.

For example the [doc_helpers](http://origen-sdk.org/doc_helpers)
plugin contains a test flow layout template at
<code>templates/shared/test/_flow.md.erb</code>, and an importing
application would reference this template via the path
<code>doc_helpers/test/_flow.md.erb</code>.

#### Sharing Pattern and Program Sources

When test pattern and program directories are shared Origen will look within these for
the requests patterns/flows whenever the given plugin is designated as the
current plugin.

See the [Current Plugin](<%= path "guides/plugins/current" %>) for more detail on this.

For example say our plugin is called <code>atd_test</code> and it provides a pattern
called <code>atd_ramp.rb</code>, then
it could be generated like this from the parent application workspace:

~~~text
origen pl atd_test
origen g atd_ramp
~~~

Alternatively you can override the current plugin at runtime like this, this is
equivalent to the above:

~~~text
origen g atd_ramp --plugin atd_test
~~~

Program generation source files work from exactly the same principles.

Note that since there is currently no easy way to view a list of all patterns provided
by a plugin, it is conventional for the plugin to provide custom commands to generate
a complete set of patterns, e.g. something like this:

~~~text
origen atd_test:prod_pats   # Generate all production patterns from the ATD plugin
origen atd_test:prod_prog   # Generate the production test program from the ATD plugin
~~~

#### Sharing Application Commands

To share custom commands supply a path to a command definition/launcher file within the plugin
as shown in the example above.

This file works very similar to the way that [custom commands](<%= path "guides/misc/commands" %>)
are added to an application.

Here is an example command launcher file from a real plugin, this adds a custom
command, <code>origen atd_test:j750</code>, to the host application and also extends the
<code>origen g</code> command by adding an additional option to it.

Note the use of [Origen.root!](<%= path "guides/plugins/paths" %>) and
[Origen.app!](<%= path "guides/plugins/app" %>) to refer to the plugin's own root
and application instance rather than that of the host application.

Also note that the command has been called <code>atd_test:j750</code> instead of just
<code>j750</code>, this is to ensure that there is no naming collision with commands
that could be added by other plugins.
In future Origen will automatically apply a plugin specific prefix to the commands like this,
but until then all plugin developers are expected to be good citizens and add this manually.

~~~ruby
# config/shared_commands.rb

# The requested command is passed in here as @command
case @command

when "atd_test:j750"
  require "#{Origen.root!}/lib/commands/j750"
  # Important to exit when a command has been fulfilled or else Origen core will try and execute it
  exit 0

# Add an additional option to the standard generate command, important to have no exit here
when "generate"
  @application_options << ["--md5", "Apply an MD5 checksum to pattern names"]
  Origen.app!.md5 = true if ARGV.include?("--md5")

# Always leave an else clause to allow control to fall back through to the Origen command handler.
# You probably want to also add the command details to the help shown via 'origen -h',
# you can do this bb adding the required text to @plugin_commands before handing control back to
# Origen.
else
  @plugin_commands << <<-EOT
 atd_test:j750 Generate the ATD test program for J750
  EOT

end
~~~

#### Sharing Global Commands

The above allows you to share commands when running from within an application instance. But what if
we want to share commands regardless of whether we are running in an application? In this way, Origen
can be even further utilized as a tool distribution platform and but allow all of our non-application
specific functionality to still be used. E.g., LSF manager, authentication, revision control APIs, etc.

Adding shared global commands is very similiar to adding shared application commands, as shown above. The 
<code>global_launcher</code> option in the <code>config.shared</code> definition points to a file containing
the global commands. This file, call it <code>config/global_commands.rb</code>, for example, is analogous to
the <code>config/shared_commands.rb</code> file from the above and looks about the same, with the exception
that the <code>@plugin_commands</code> variable is now <code>@global_commands</code>. An example is below:

~~~

case @command

# Print the current version notes of the atd_test module.
when "atd_test:version_notes"
  require "#{Origen.root!}/lib/commands/version_notes"
  exit 0

else
  @global_commands << <<-EOT
 atd_test:version_notes             Checks the dPDM BOM versus the DS HREFs
                                    -h for a full description
  EOT

end

~~~

<div class="alert alert-danger">
  <strong>Danger!</strong> Global commands are a bit more involved and require some extra setup outside of the
  plugin itself. When inside an application, these commands will behave as <code>Shared</code> commands,
  but outside of an application, the plugin must be brought in as a dependency either through <code>User Installs</code>
  or <code>Tool Repo Installs</code>, or must be added to the system gems. For a refresher on what this means,
  please see the <a href="<%= path 'guides/starting/invoking' %>">Invocation Considerations Guide</a>. For even more
  details please see the <a href="<%= path 'guides/advanced/invocations' %>">Advanced Topic On Invocations</a>.
</div>

<div class="alert alert-danger">
  <strong>Danger!</strong> <code>Global</code> commands behave slightly differently when run from an application
  versus running without one. Origen does provide a 'standalone' application which gives all the functionality,
  but this application cannot be customized. If you find yourself requiring application-specific behavior, your command
  is better suited to be a <code>Shared</code> command.
</div>

<div class="alert alert-danger">
  <strong>Danger!</strong> Although <code>Global</code> and <code>Shared</code> commands may have differences
  in the application behavior, they do not have any differences, from an Origen perspective, when invoked
  either by a <code>Tool Repo Install</code> or <code>User Install</code> setup versus a <code>System Level</code>
  setup. Bundler makes it easier to develop Global commands than using Gem natively, so it is recommended
  that you use a <code>User Install</code> when developing Global commands. You can read up on this is and
  how to set it up in the <a href="<%= path 'guides/advanced/invocations' %>">Advanced Topic On Invocations</a>.
</div>

#### Command Sharing Considerations

Due to the way that Origen acknowledges shared, global, and application commands, a pitfall exists where user-defined commands
can step on each other (known as <i>command clobbering</i>). This has the implication that you may not be running the command you think you
are running.

Consider a plugin, called <code>my_plugin_1</code> that adds and implements a shared command <code>my_command</code>. This
command will be available to any application which contains <code>my_plugin_1</code> as a dependency. Now, consider a second plugin,
<code>my_plugin_2</code> which is also a dependency of the application. <code>my_plugin_2</code> also adds and implements the
command <code>my_command</code>. Both plugins are adding the same command and are clobbering the command listing. The behavior
will be dependent on the load order and can be difficult to predict.

For example, if <code>my_plugin_1</code> is listed before <code>my_plugin_2</code> in the application's <code>Gemfile</code>, then
<code>my_plugin_1</code> will be loaded and evaluated first and <code>my_command</code> in <code>my_plugin_1</code> will be run. However,
that is not all the consideration needed. If <code>my_plugin_1</code> actually lists <code>my_plugin_2</code> as its dependency,
then <code>my_plugin_2</code> will be loaded before <code>my_plugin_1</code> regardless of the load order in the application's
<code>Gemfile</code>. Now, <code>my_command</code> in <code>my_plugin_2</code> will be run. This means that it can be difficult
to track which one of the commands will be run in the case of command clobbering between plugins. You can use the <code>bundle</code>
command to see what the final load order is and track down which version of the command will be run.

The solution to this is to add namespacing to each of the plugins, as shown in the 
[Sharing Application Commands](<%= path "guides/plugins/creating#Sharing_Application_Commands" %>) 
section above. <b>However, this is up to the plugin developers to abide by. Origen does not guarantee nor enforce this 
behavior and is none the wiser to plugins stepping on each other. No
warnings or errors are generated in the event of command clobbering.</b>

Regarding global commands, the same pitfall exists. However, an additional issue is that a shared command can now clobber a global
command. In the current Origen implementation, shared commands take precedence over global commands. Meaning, if <code>my_plugin_1</code>
implements <code>my_command</code> as a global command and, for one reason or another, it implements <code>my_command</code> as a shared
command, then when running in an application the <code>shared</code> version of <code>my_command</code> will be used. However, external
to an application, the <code>global</code> version of <code>my_command</code> will be run. Like shared command clobbering, <b>no warnings
or errors are generated, Origen is completely oblivious to this behavior, and it is up to the plugin developers to ensure this does not
occur.</b>

This is a known issue which has been registerd with the core team. For tracking this issue's status, please see the 
[Cascading Commands Issue on Github.](https://github.com/Origen-SDK/origen/issues/108)

% end
