% render "layouts/guides.html" do

Origen provides some general-purpose utlity classes and modules that can help you to better develop your applications,
plugins, and other features. The following is a list of the utilities currently implemented by Origen:

<div class="list-group">
  <li class="list-group-item"><a href="#Block_Args">Block Args</a></li>
  <li class="list-group-item"><a href="#Collector">Collector</a></li>
  <li class="list-group-item"><a href="#CSV_Data">CSV Data</a></li>
  <li class="list-group-item"><a href="#Diff">Diff</a></li>
  <li class="list-group-item"><a href="#File_Diff">File Diff</a></li>
  <li class="list-group-item"><a href="#Input_Capture">Input Capture</a></li>
  <li class="list-group-item"><a href="#Mailer">Mailer</a></li>
  <li class="list-group-item"><a href="#Time_And_Date">Time And Date</a></li>
</div>

### Block Args

<%= render "partials/placeholder.md" %>

### Collector

You may notice some features within Origen, such as <code>registers</code>, <code>bits</code>, or anything
that uses <code>componentable</code> to instantiate, are able to take either an <code>options hash</code> or an
<code>options block</code> and merge the two, allowing users to work with whichever is preferred. Under the
hood of these features, is the <code>Collector</code>, which allows for a block to be transformed
into a <code>hash</code> and can then be used as options for the given feature.

The collector is available at <code>Origen::Utility::Collector</code>, but a shortcut method to create a new instance is
available as <code>Origen::Utility.collector</code>. The collector isn't really meant to be used throughout, rather
it is an intermediary step to join hashes and blocks. An example of using the collector is:

~~~ruby
block = Proc.new do |collector|
  collector.arg1 'argument 1'
  collector.arg2 'argument 2'
end

collector = Origen::Utility.collector
block.call(collector)

collector.to_h
#=> {arg1: 'argument 1', arg2: 'argument 2'}
~~~

The result of using the collector is that each argument given as a method is transformed into a hash key/value pair.

##### No Value Given

If a method is given without a value, it will be defined and set to <code>nil</code>, as shown below:

~~~ruby
block = Proc.new do |collector|
  collector.arg1
end

collector = Origen::Utility.collector
block.call(collector)

collector.to_h
#=> {arg1: nil}
~~~

#### Using An Anonymous Collector

As previously stated, one use of the collector is to transform an <code>option block</code> into an <code>option hash</code>
and/or merge an existing<code>option hash</code> and the resulting <code>option hash</code>. This allows for options
to be given either as a hash or as a block or both, depending on the nature of the options and the preference of the user. In
these cases, it is common to just instantiate the collector, convert it to a hash, then throw it away. This can
be done in a single line as:

~~~ruby
collector = Origen::Utility.collector(&block).to_h
~~~

<div class="alert alert-danger">
<strong>Danger!</strong> This syntax will always work, but other syntaxes have some hidden dangers. See
<a href="#Caveats_of_Anonymous_Collectors">later in this page for details</a>
</div>

#### Merging Options

The collector allows for automatic <code>hash merging</code>. The intent is to easily allow for an <code>options hash</code>
and an <code>options block</code> to merge into a single <code>combined hash</code>. This can be achieved by passing in
two options during collector initialization: <code>hash</code> and <code>merge_method</code>.

~~~ruby
# Combining a hash and block with no clashes
options = {argA: 'arg A', argB: 'arg B'}
block = Proc.new do |collector|
  collector.arg1 'arg 1'
  collector.arg2 'arg 2'
end
Origen::Utility.collector(hash: options, &block).to_h
  #=> {argA: 'arg A', argB: 'arg B', arg1: 'arg 1', arg2: 'arg 2'}

# Combining a hash and block with some keys clashing (default merging)
options = {arg1: 'has arg 1', arg2: 'hash arg 2'}
block = Proc.new do |collector|
  collector.arg2 'block arg 2'
  collector.arg3 'block arg 3'
end
Origen::Utility.collector(hash: options, &block).to_h
  #=> {arg1: 'has arg 1', arg2: 'hash arg 2', arg3: 'block arg 3'}

# Combining a hash and block with explicit merge method :keep_hash (default)
options = {arg1: 'has arg 1', arg2: 'hash arg 2'}
block = Proc.new do |collector|
  collector.arg2 'block arg 2'
  collector.arg3 'block arg 3'
end
Origen::Utility.collector(hash: options, merge_method: :keep_hash, &block).to_h
  #=> {arg1: 'has arg 1', arg2: 'hash arg 2', arg3: 'block arg 3'}
~~~

As shown, of the options that were given to both the hash and the block, the options in the hash were kept. This is the
default behavior, or can be explicitly defined by providing <code>merge_method: :keep_hash</code> to avoid confusion.

<div class="alert alert-info">
<strong>Info!</strong> Running the collector without a block will always be just the input hash.
</div>

Two other merge method exists: <code>:keep_block</code> and <code>:fail</code>. <code>:keep_block</code> is just the
opposite of <code>:keep_hash</code> and <code>:fail</code> will raise an error if the same option is provided by
both the hash and the block. Trying to set the <code>merge_method</code> to anything else will raise an error.

~~~ruby
options = {arg1: 'has arg 1', arg2: 'hash arg 2'}
block = Proc.new do |collector|
  collector.arg2 'block arg 2'
  collector.arg3 'block arg 3'
end
Origen::Utility.collector(hash: options, merge_method: :keep_block, &block).to_h
  #=> {arg1: 'has arg 1', arg2: 'block arg 2', arg3: 'block arg 3'}
~~~

~~~ruby
options = {arg1: 'has arg 1', arg2: 'hash arg 2'}
block = Proc.new do |collector|
  collector.arg3 'block arg 3'
end
Origen::Utility.collector(hash: options, merge_method: :fail, &block).to_h
  #=> {arg1: 'has arg 1', arg2: 'hash arg 2', arg3: 'block arg 3'}

options = {arg1: 'has arg 1', arg2: 'hash arg 2'}
block = Proc.new do |collector|
  collector.arg2 'block arg 2'
  collector.arg3 'block arg 3'
end
Origen::Utility.collector(hash: options, merge_method: :fail, &block).to_h
  #=> Origen::OrigenError
  #=> 'Origen::Utility::Collector detected both the hash and block attempting to set :arg2 (merge_method set to :fail)'
~~~

#### Failure Conditions

As shown above, trying to merge the same key in the hash and block when <code>merge_method: :fail</code>
will cause an exception. There are a few other conditions that will cause the collector to fail.

Since the collector tries to transform an <code>options block</code> into a hash, some of the syntactic rules of 
hashes are enforced on blocks.

##### Multiple Sets

The collector will fail if the same method is set after multiple times. For example:

~~~ruby
block = Proc.new do |collector|
  collector.arg1 'hi'
  collector.arg1 = 'hello'
end
Origen::Utility.collector(&block)
  #=> ArgumentError
~~~

Even though this is technically allowed in Ruby, its the equalivent of a hash formatted
<code>{arg1: 1, arg1: 2}</code>, which just overwrites values. There is no reason for this usage and it just
causes confusion (especially in large hashes or blocks), so the collector disallows this.

##### Multiple Values In A Single Set

Each method can only set one value. As such, providing any number of arguments greater than one will fail, as
will attempting to use both an argument and a block.

For example:

~~~ruby
block = Proc.new do |collector|
  collector.arg1 'arg1', 'arg2', 'arg3'
end
Origen::Utility.collector(&block)
  #=> ArgumentError

block = Proc.new do |collector|
  collector.arg1('arg1') do
    'nothing'
  end
end
Origen::Utility.collector(&block)
  #=> ArgumentError
~~~

This would be the hash equalivent of <code>{arg1: 'arg1', 'arg2', 'arg3'}</code> which is a syntax error. Also,
setting a value to just a block is accepted, just not a block and another value simultaneously.

#### Caveats of Anonymous Collectors

For the collector, <code>method_missing</code> actually returns <code>self</code>, instead of the value set. This
means that blocks that only use the <code>collector.arg value</code> notation will always return the collector. The
advertised means of using an anonymous collector is:

~~~ruby
Origen::Utility.collector(options, &block)
~~~

However, the following may work, depending on the block:

~~~ruby
block.call(Origen::Utility.collector)
~~~

For the above case, in order to get a collector instance, the block must return the collector. If
just using <code>collector.arg val</code> syntax, this will work, but <code>collector.arg = val</code> syntax will not.
This is due to Ruby's rules that <code>collector.arg = val</code> will return <code>val</code>. Likewise, adding
other stuff at the end of the block will also change its return value:

~~~ruby
block = Proc.new do |collector|
  collector.arg1 'arg1'
end
block.call(Origen::utility.collector)
  #=> Collector Instance

block = Proc.new do |collector|
  collector.arg1 = 'arg1'
end
block.call(Origen::utility.collector)
  #=> 'arg1'

block = Proc.new do |collector|
  collector.arg1 'arg1'
  'random stuff'
end
block.call(Origen::utility.collector)
  #=> 'random stuff'
~~~

However, if the block returns the collector itself, as below:

~~~ruby
block = Proc.new do |collector|
  collector.arg1 'arg1'
  'random stuff'
  collector
end
block.call(Origen::utility.collector)
  #=> Collector Instance
~~~

then this will work as expected. But, this relies on the block being written in a way that is impossible to detect
from the collector itself.

The correct way to work around this is to use the advertised means of initializing an anonymous collector. This will
give you the desired result regardless of the block's return value.

~~~ruby
block = Proc.new do |collector|
  collector.arg1 'arg1'
end
Origen::utility.collector(&block)
  #=> Collector Instance

block = Proc.new do |collector|
  collector.arg1 = 'arg1'
end
Origen::utility.collector(&block)
  #=> Collector Instance

block = Proc.new do |collector|
  collector.arg1 'arg1'
  'random stuff'
end
Origen::utility.collector(&block)
  #=> Collector Instance
~~~

### CSV Data

<%= render "partials/placeholder.md" %>

### Diff

<%= render "partials/placeholder.md" %>

### File Diff

<%= render "partials/placeholder.md" %>

### Input Capture

<%= render "partials/placeholder.md" %>

### Mailer

Usage of the mailer in applications or plugins is described at
[sending emails](<%= path "guides/misc/users/#Sending_Emails" %>) and [maillists](<%= path "guides/misc/users/#Maillists" %>).

As a quick recap of the above, you can send an email using Origen's mailer:

~~~ruby
Origen.mailer.send_email(subject: "Hello", to: ['user@domain.com', 'other_user@domain.com'], body: message)
~~~

The <code>subject</code>, <code>to</code>, and <code>from</code> options are the most used but you can get a test email
sent to the current user (yourself) by omitting all the options:

~~~ruby
Origen.mailer.send_email
  #=> to: current user's email
  #=> from: current user's email
  #=> subject: 'Hello'
  #=> body: 'Hello from Origen!'
~~~

However, that assumes a working mailer setup. In order to use the mailer, either the user, in the options, or the site
administator will need to setup the mailer correctly. It is recommended that the mailer be setup in the 
[Site Config](<%= path "guides/starting/company/" %>), allowing all users to use the same configuration.
However, each option can be overridden when using the mailer directly.

For the mailer's options in the site config, 
[please see the default site config](https://github.com/Origen-SDK/origen/blob/master/origen_site_config.yml).

Origen's mailer is just a wrapper around Ruby's [net/smtp](https://docs.ruby-lang.org/en/2.4.0/Net/SMTP.html) library. 
When using a SMTP server, you'll need to supply
the <code>server</code>, <code>port</code>, and <code>domain</code> values. These can come from the site config
as keys:

~~~yml
email_domain: company.com
email_server: smtp.company.net
email_port: 25
~~~

Or can be passed in as options:

~~~ruby
Origen.mailer.send_email(
  domain: 'company.com',
  server: 'smtp.company.net',
  port: 25,
)
~~~

For non-authenticating SMTP servers, that is usually sufficient. For servers which require that the requester supply some
credentials, you can also supply an authentication customization either in the site config:

~~~yml
email_authentication: login
~~~

Or as an option:

~~~ruby
Origen.mailer.send_email(authentication: :login)
~~~

The username and password will default to the current user's credentials, <code>Origen.current_user.email</code> and
<code>Origen.current_user.password</code> respectively, and, in general, this should be adequate.
However, these can be overwritten if, for example, a service account is used instead of the active user's account:

~~~yml
email_auth_user: service_user_email
email_auth_password: service_user_password
~~~

~~~ruby
Origen.mailer.send_email(
  authentication: :login,
  auth_user: 'service_user_email',
  auth_password: 'service_user_password',
)
~~~

You can reference Origen's wrapper around SMTP [on Github](https://github.com/Origen-SDK/origen/blob/master/lib/origen/utility/mailer.rb).

### Time And Date

<%= render "partials/placeholder.md" %>

% end
