% render "layouts/guides.html" do

#### Creating A Model

A model can be any class that includes the <code>Origen::Model</code> module, this will give you access to
all Origen APIs for defining registers, pins, etc. and generally makes Origen aware of any instances of the
model when you instantiate them.

~~~ruby
class MyModel
  include Origen::Model
end
~~~

As a general rule **include the <code>Origen::Model</code> module every time you create a new class in Origen**,
even if the model is
not of an SoC or an IP block and the concept of registers and pins does not apply.
There is not really any downside to including these APIs if you are not going to use them and this
module is the main mechanism to hook your class into the Origen ecosystem.

#### Creating A Top Level Model

If a given model represents the top-level of an device then you should also include the <code>Origen::TopLevel</code>
module, this specifically lets Origen know that it is a top-level model and as such it holds a special
place in the Origen runtime environment - for example any register write requests will be sent to this
object for dispatch.

Internally the <code>Origen::TopLevel</code> module includes the <code>Origen::Model</code> module and
therefore it does not need to be specifically included in top-level model classes (although there is
no harm from doing so).

~~~ruby
class MySoCModel
  include Origen::TopLevel
end
~~~

<div class="alert alert-danger">
  <strong>Warning!</strong> While you can define multiple top-level models only one of them can be instantiated
  per target or Origen thread of execution. Attempts to instantiate a 2nd top-level object will raise an error.
</div>


Regardless of what name is given to an instance of a top-level class it can always be looked up via
<code>Origen.top_level</code> or more simply <code>$dut</code>. All Origen developers can rely on this
convention to access the current top-level object:

~~~ruby
soc = MySoCModel.new
Origen.top_level == soc      # => true
$dut == soc                  # => true
~~~

#### Modelling Hierarchy by Example

As your experience with your application grows, the way to partition your models for easiest maintenance
and development will start to become clear. At that point you may feel decide to start introducing
abstract classes to handle the concepts that exist within your domain and which don't necessarily have
a direct counterpart in the physical domain.

However to get started we recommend that you closely follow the physical architecture of your target device, where
each of the main IP blocks that you care about has an associated model.

In this example we are going to set up an Origen model structure that will allow us to write some 
test code for a fictional NVM module contained within an SoC.

#### The Top Level

We are going to call our application 'NVM' and all of our code will reside in the NVM namespace. However
the top-level SoC model is something of a special case because potentially it could be shared by many
applications - e.g. an application concerned with testing the SRAM could re-use our SoC model.

So to set us up to handle that eventuality in the future let's put all of our top-level definitions into
their own namespace which
we will call <code>SOC</code>. Here is how to define the top level model:

~~~ruby
# lib/soc/eagle_m352.rb
module SOC
  class EAGLE_M352
    include Origen::TopLevel

    def initialize(options={})
    end
  end
end
~~~

The initialize method will automatically be called by Ruby whenever a new instance of this class is
instantiated - so this is a place to do any setup or initialization that is required whenever a new
Eagle model comes into being.

At this point we have also chosen to have this method optionally accept a hash of options, we will do this
almost every time we define a method since it builds in great flexibility and the ability to handle
additional arguments in future that we may not have thought about when first defining a new method.

#### Interacting with Our New Model

Our first model is now defined and we can now go and talk to it for the first time, to do so start
an interactive Origen session from your terminal:

~~~ruby
origen i
~~~

This command loads up an interactive Ruby terminal and automatically loads Origen and your application, so we can
now experiment with our models:

~~~ruby
$dut = SOC::EAGLE_M352.new

$dut.is_a?(SOC::EAGLE_M352)     # => true
~~~  

Above we simply instantiated a new instance of our class, and then asked it if it was an instance of
<code>SOC::EAGLE_M352</code>, to which it replied: 'yes'.

#### Adding Sub Blocks

Sub-blocks should be used to model IP blocks or indeed any sub-components within that IP, a generic sub-block
can be declared very simply within the top-level's initialize method:

~~~ruby
# lib/soc/eagle_m352.rb
def initialize(options={})
  sub_block :nvm
end
~~~

By default this will instantiate an object that includes all of the usual Origen APIs (regs, pins, etc.) and 
this can then be decorated as required by the application (see example below). Most importantly this wires up
everything internally such that the relationship between the child and the parent are known to Origen and it
will automatically build an accessor to get the child module:

~~~ruby
$dut = SOC::EAGLE_M352.new

$dut.nvm         # => Generic Origen object
$dut.nvm.parent  # => $dut

$dut.children    # => {:nvm => <object>}

# Decorate as required by calling Origen APIs on the object
$dut.nvm.reg :reg1, 0x30 do |reg|
  reg.bits 31..0, :data
end

# The NVM now has a register available...
$dut.nvm.reg1.write(0x1234)
~~~

The above approach is ideal where the models are being built from a 3rd party data source (e.g. standard XML)
and all that is required is to get an Origen object representation of the same data.

However in cases where more native richness is required you can supply a class for the object,
let's create a dedicated model for our NVM IP:

~~~ruby
# lib/nvm/nvm_m682.rb
module NVM
  class NVM_M682
    include Origen::Model

    def initialize(options={})
      # Add an example register
      reg :reg1, 0x30 do |reg|
        reg.bits 31..0, :data, reset: 0xFFFF_FFFF
      end
    end
  end
end
~~~

This follows the same pattern as our first model, note the use of the <code>NVM</code> namespace and the
subsequent storage of the file in the <code>lib/nvm</code> directory rather than <code>lib/soc</code>.

We can now refer to this class in our sub-block definition and verify that the register we added is available:

~~~ruby
# lib/soc/eagle_m352.rb
def initialize(options={})
  sub_block :nvm, class_name: "NVM_M682"
end


$dut = SOC::EAGLE_M352.new
$dut.nvm.reg1.address        # => 0x30
$dut.nvm.reg1.data           # => 0xFFFF_FFFF
~~~

#### Adding Sub Block Groups

If needing to add several similar sub blocks, a `sub_block_group` can be used.

~~~ruby
# lib/soc/eagle_m352.rb
def initialize(options={})
  sub_block_group :memories
    sub_block :memory0,        class_name: "MEMORY_128_B954"
    sub_block :memory1,        class_name: "MEMORY_64_B954"
    sub_block :memory2,        class_name: "MEMORY_32_B954"
  end
end

$dut = SOC::EAGLE_M352.new
$dut.memory0.class               # MEMORY_128_B954
$dut.memory1.class               # MEMORY_64_B954
$dut.memory2.class               # MEMORY_32_B954
$dut.memories.class              # Array (Array of all 3 memory sub_blocks)

# By default uses sub_block_group uses Array class, so all Array methods are available
memories                         # => [<memory 0 instance>, <memory 1 instance>, <memory 2 instance>]
memories.size                    # => 3
memories.first                   # => <memory 0 instance>
~~~

In addition, a custom container class can also be used instead of an Array to contain the sub_block objects if desired.
To do this, pass the desired container class as follows:

~~~ruby
# lib/soc/eagle_m352.rb
def initialize(options={})
  sub_block_group :memories, class_name: "MEMORIES_B294"
    sub_block :memory0,        class_name: "MEMORY_128_B954"
    sub_block :memory1,        class_name: "MEMORY_64_B954"
    sub_block :memory2,        class_name: "MEMORY_32_B954"
  end
end


$dut = SOC::EAGLE_M352.new
$dut.memory0.class               # MEMORY_128_B954
$dut.memory1.class               # MEMORY_64_B954
$dut.memory2.class               # MEMORY_32_B954
$dut.memories.class              # MEMORIES_B954 (custom class containing all 3 memory sub_blocks)

~~~

The recommended way to create a custom container class is to sub-class the Array class, then add additional methods, like this:

~~~ruby
# lib/memories.rb
class MEMORIES_B294 < ::Array
  # Example of a custom method to print the names of all contained memories
  def print_ids
    # Since this class is based on Array, we can use all Array methods like 'each'
    # on the contained objects
    each { |mem| puts mem.id }
  end
end

# All conventional Array methods are supported since we sub-classed Array
memories.size                   # => 3
memories.first                  # => <memory 0 instance>
memories.map { |mem| mem.id }   # => [:memory0, :memory1, :memory2]

# Plus we have our custom method(s)
memories.print_ids
=>
memory0
memory1
memory2
~~~

If you do not sub-class Array, then you will need to be sure to define a `<<` push type method:

~~~ruby
# lib/memories.rb
class MEMORIES_B294
  def initialize
    @sub_blocks = {}
  end
  # Example of a custom << method to permit adding sub_blocks to container
  # Required for use with sub_block_group
  def <<(sub_block)
    @sub_blocks[sub_block.id] = sub_block
  end
  # Example of a custom method to print the names of all contained memories
  def print_ids
    each { |mem| puts mem.id }
  end
  # Example of custom 'each' method
  def each
    @sub_blocks.each_value do |sub_block|
      yield sub_block
    end
  end
end

# Drawback is you only have methods defined in this class.
~~~

#### Wash, Rinse, Repeat

This process can now be repeated to model the complete design hierarchy, the <code>sub_block</code> method
can be used within sub-blocks themselves with no limit on depth.

Here are the complete set of initial stub models for the Eagle and it's NVM module:

~~~ruby
# lib/soc/eagle_m352.rb
module SOC
  class EAGLE_M352
    include Origen::TopLevel

    def initialize(options={})
      sub_block :nvm, class_name: "NVM_M682"
    end
  end
end

# lib/nvm/nvm_m682.rb
module NVM
  class NVM_M682
    include Origen::Model

    def initialize(options={})
      sub_block  :analog,        class_name: "ANALOG_T921"
      sub_block_group :memories, class_name: "MEMORIES_B294"
        sub_block :memory0,        class_name: "MEMORY_128_B954"
        sub_block :memory1,        class_name: "MEMORY_64_B954"
        sub_block :memory2,        class_name: "MEMORY_32_B954"
      end
      sub_block  :state_machine, class_name: "CONTROL_D345"
    end

  end
end

# lib/nvm/analog_t921.rb
module NVM
  class ANALOG_T921
    include Origen::Model

    def initialize(options={})
    end
  end
end

# lib/nvm/memory_128_b954.rb
module NVM
  class MEMORY_128_B954
    include Origen::Model

    def initialize(options={})
      @size_in_kB = 128
    end
  end
end

# lib/nvm/memory_64_b954.rb
module NVM
  class MEMORY_64_B954
    include Origen::Model

    def initialize(options={})
      @size_in_kB = 64
    end
  end
end

# lib/nvm/memory_32_b954.rb
module NVM
  class MEMORY_32_B954
    include Origen::Model

    def initialize(options={})
      @size_in_kB = 32
    end
  end
end

# lib/memories.rb
class MEMORIES_B294 < ::Array
  def print_ids
    each { |mem| puts mem.id }
  end
end

# file: lib/nvm/control_d345.rb
module NVM
  class CONTROL_D345
    include Origen::Model

    def initialize(options={})
    end
  end
end
~~~

A couple of points are worth noting from the above code:

* The namespace reference is not required when making references to other models/classes within the
  same namespace.
* Multiple instances of the *memory* sub-block have been defined. By convention use the
  plural for the group name, i.e. <code>:memories</code> and singular with an incrementing digit
  for the sub_blocks contained therein:  <code>memory0</code>, <code>memory1</code>, etc.
* The classes for the various NVM sub-blocks are all empty right now and as such they did
  not really need to be defined, however these are placeholders for us to go on and add more
  logic in the future.

Even though we have not yet added any logic to our models they are starting to become useful,
for example we can now ask the Eagle how many NVM memory blocks that it has:

~~~ruby
$dut = SOC::EAGLE_M352.new

$dut.nvm.memories.size    # => 4
~~~  


% end
