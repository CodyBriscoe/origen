#!/usr/bin/env ruby
$VERBOSE=nil  # Don't care about world writable dir warnings and the like

require "pathname"
require "fileutils"

class RGenBootError < StandardError
end

RGEN_MIN_GCC_VERSION = "4.7.3"

# This will be referenced later in ruby_version_check, the rgen used to launch
# the process is different than the one that actually runs under bundler
$rgen_launch_root = Pathname.new(File.dirname(__FILE__)).parent

# Override any influence from $LANG in the users environment 
Encoding.default_external = Encoding::UTF_8
Encoding.default_internal = Encoding::UTF_8
ENV['LC_ALL'] = nil
ENV['LANG'] = nil
ENV['LANG'] = 'en_US.UTF-8' 

# Work out what RGen.root is if we are running inside an RGen application, this will be
# later used to execute from that app's bundle even if the rgen executable lives somewhere
# else (e.g. in the tools repository)
app_config = File.join('config', 'application.rb')
if File.exist?(app_config)
  rgen_root = Dir.pwd
else
  path = Pathname.new(Dir.pwd)
  until path.root? || rgen_root
    if File.exist?(File.join(path, app_config))
      rgen_root = path.to_s
    else
      path = path.parent
    end
  end
end

if rgen_root
  # Force everyone to have a consistent way of installing gems with bundler
  ENV['BUNDLE_GEMFILE'] = File.join(rgen_root, "Gemfile")
  ENV['BUNDLE_PATH'] = File.expand_path('~/.rgen/gems')
  ENV['BUNDLE_BIN'] = File.join(rgen_root, "lbin")
end

if rgen_root && File.exist?(ENV['BUNDLE_GEMFILE'])
  # Overriding bundler here so that bundle install can be automated as required
  require 'bundler/shared_helpers'
  if Bundler::SharedHelpers.in_bundle?
    require 'bundler'
    if STDOUT.tty?
      begin
        Bundler.setup
        fail RGenBootError unless File.exist?(ENV['BUNDLE_BIN'])
      rescue Gem::LoadError, Bundler::BundlerError, RGenBootError => e
        cmd = "bundle install --gemfile #{ENV["BUNDLE_GEMFILE"]} --binstubs #{ENV["BUNDLE_BIN"]} --path #{ENV["BUNDLE_PATH"]}"
        #puts cmd
        puts "Installing required gems..."
        puts
        `chmod o-w #{rgen_root}` # Stops some annoying world writable warnings during install
        `chmod o-w #{rgen_root}/bin` if File.exist?("#{rgen_root}/bin")
        `chmod o-w #{rgen_root}/.bin` if File.exist?("#{rgen_root}/.bin")
        result = false
        local_gem_dir = "#{ENV['BUNDLE_PATH']}/ruby/2.1.0"
        system_gem_dir = "/run/pkg/fs-ruby-/2.1.5-p273/lib/ruby/gems/2.1.0"
        Bundler.with_clean_env do
          if RUBY_PLATFORM == "x86_64-linux"
            `bundle config build.nokogiri --use-system-libraries=true --with-xml2-include=/pkg/libxml2-/2.9.0/x86_64-linux/include/libxml2 --with-xml2-lib=/pkg/libxml2-/2.9.0/x86_64-linux/lib`
            gcc_version = begin
              begin              
                line = %x[gcc --version].split("\n").first
              rescue
                puts "You don't seem to have gcc available, make sure you following the RGen installation instructions:"
                puts "http://rgen.freescale.net/rgen/latest/guides/starting/installing/"
                exit 1
              end
              if line =~ /(\d+\.\d+\.\d+)/
                $1
              end
            end
            if gcc_version
              if gcc_version < RGEN_MIN_GCC_VERSION
                puts "RGen requires a minimum of GCC version #{RGEN_MIN_GCC_VERSION}, but you have #{gcc_version}."
                puts "The most likely reason for this is that your environment has required a specific version of GCC that has higher"
                puts "priority than the RGen tool collection in your PATH."
                puts "One way to fix this is to add the RGen tool collection as the highest priority in your PATH as described here:"
                puts "http://rgen.freescale.net/rgen/latest/guides/starting/installing/"
                exit 1
              end
            else
              puts "Unable to determine gcc version, proceeding with fingers crossed..."
            end
            unless File.exist?("#{local_gem_dir}/.seeded_from_system")
              puts "Installing gems that are available from the system Ruby, this can take a few minutes, please be patient..."
              FileUtils.mkdir_p(local_gem_dir) unless File.exist?(local_gem_dir) # Make the full path the the local gems
              FileUtils.rm_rf(local_gem_dir)   # Then clear the end directory
              FileUtils.cp_r(system_gem_dir, local_gem_dir)
              FileUtils.touch "#{local_gem_dir}/.seeded_from_system"
            end
          end
          result = system(cmd)
        end
        `chmod o-w #{ENV["BUNDLE_BIN"]}`
        # Make .bat versions of all executables, Bundler should really be doing this when running
        # on windows
        if RUBY_PLATFORM == 'i386-mingw32'
          bat_present = File.exist? "#{rgen_root}/lbin/rgen.bat"
          Dir.glob("#{rgen_root}/lbin/*").each do |bin|
            unless bin =~ /.bat$/
              bat = "#{bin}.bat"
              unless File.exist?(bat)
                File.open(bat, 'w') { |f| f.write('@"ruby.exe" "%~dpn0" %*') }
              end
            end
          end
          if !bat_present && !result
            puts "Some Windows specific updates to your workspace were required, please re-run the last command"
            exit 0
          end
        end
        if result
          puts
          puts "The required gems have been installed, please re-run the previous command"
          exit 0
        else
          puts
          puts "If you have just updated a gem version and are now getting an error that Bundler cannot find compatible versions for it then first try running 'bundle update <gemname>'."
          puts "For example if you have just changed the version of rgen_core run 'bundle update rgen_core'."
          exit 1
        end
      end
    else
      Bundler.setup
    end
  end
  require "bundler/setup"
  require "rgen"
else
  $LOAD_PATH.unshift "#{File.expand_path(File.dirname(__FILE__))}/../lib"
  require "rgen"
end

# If this script has been invoked from within an RGen application then open
# up all commands, if not then only allow the command to create a new RGen
# application.
# Note that the RGen core workspace is now a fully fledged RGen application in
# its own right.
begin
  if rgen_root
    require "rgen/commands"
  else
    require "rgen/commands_global"
  end
ensure
  if RGen.app_loaded?
    RGen.app.listeners_for(:on_rgen_shutdown).each do |listener|
      listener.on_rgen_shutdown
    end
    RGen.app.runner.shutdown
  end
end
